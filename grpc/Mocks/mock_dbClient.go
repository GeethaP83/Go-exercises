// Code generated by MockGen. DO NOT EDIT.
// Source: dbClient/dbClient.go

// Package Mocks is a generated GoMock package.
package Mocks

import (
	dataModels "home/geetha/Desktop/practice/grpc/dataModels"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// CreateEmployee mocks base method.
func (m *MockDatabase) CreateEmployee(arg0 dataModels.Employee) (dataModels.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmployee", arg0)
	ret0, _ := ret[0].(dataModels.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmployee indicates an expected call of CreateEmployee.
func (mr *MockDatabaseMockRecorder) CreateEmployee(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmployee", reflect.TypeOf((*MockDatabase)(nil).CreateEmployee), arg0)
}

// DeleteEmployee mocks base method.
func (m *MockDatabase) DeleteEmployee(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmployee", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEmployee indicates an expected call of DeleteEmployee.
func (mr *MockDatabaseMockRecorder) DeleteEmployee(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmployee", reflect.TypeOf((*MockDatabase)(nil).DeleteEmployee), arg0)
}

// GetAllEmployees mocks base method.
func (m *MockDatabase) GetAllEmployees() ([]dataModels.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEmployees")
	ret0, _ := ret[0].([]dataModels.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEmployees indicates an expected call of GetAllEmployees.
func (mr *MockDatabaseMockRecorder) GetAllEmployees() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEmployees", reflect.TypeOf((*MockDatabase)(nil).GetAllEmployees))
}

// UpdateEmailOfEmployee mocks base method.
func (m *MockDatabase) UpdateEmailOfEmployee(arg0, arg1 string) (dataModels.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmailOfEmployee", arg0, arg1)
	ret0, _ := ret[0].(dataModels.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmailOfEmployee indicates an expected call of UpdateEmailOfEmployee.
func (mr *MockDatabaseMockRecorder) UpdateEmailOfEmployee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmailOfEmployee", reflect.TypeOf((*MockDatabase)(nil).UpdateEmailOfEmployee), arg0, arg1)
}
